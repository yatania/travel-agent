{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,SAAS,gBAAgB,CAAC,mBAAoB,WAC5C,IAoCM,EApCA,EAAiB,SAAS,gBAAgB,CAAC,oBAC3C,EAAa,SAAS,cAAc,CAAC,SACrC,EAAoB,SAAS,cAAc,CAAC,qBAC5C,EAAO,SAAS,cAAc,CAAC,eAC/B,EAAe,SAAS,cAAc,CAAC,cAGvC,EAAW,IAAI,qBACnB,SAAC,CADH,EAEI,EAAQ,OAAO,CAAC,SAAC,CAAjB,EACM,EAAM,cAAc,EACtB,EAAM,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,UAE/B,EACF,EACA,CAAE,UAAW,EAAI,GAGnB,EAAe,OAAO,CAAC,SAAC,CAAxB,EAAkC,OAAA,EAAS,OAAO,CAAC,E,GAGnD,QAAQ,IAAI,CAAC,qBAEb,IAAM,EAAgB,WACpB,IAAM,EAAa,EAAW,KAAK,CAAC,IAAI,GAGlC,EAAU,AAFK,WAEQ,IAAI,CAAC,GAKlC,OAHA,EAAkB,KAAK,CAAC,OAAO,CAAG,EAAU,OAAS,QACrD,EAAW,SAAS,CAAC,MAAM,CAAC,yBAA0B,CAAC,GAEhD,CACT,EAWA,EAAW,gBAAgB,CAAC,OAAQ,GACpC,EAAW,gBAAgB,CAAC,mBAPf,IAAA,IAAA,EAAA,UAAA,MAAA,CAAA,EAAA,AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CACT,aAAa,GACb,EAAU,WAAW,WAAM,OAAA,AAKe,EALf,KAAA,CAAA,KAAA,E,A,S,C,E,G,M,O,C,G,O,E,E,EAAQ,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,EAAA,I,A,W,M,A,U,wI,IAAO,EAKe,IAJ3D,GAMF,EAAK,gBAAgB,CAAC,SAAU,SAAC,CAAjC,EAGE,GAFA,EAAM,cAAc,GAEf,KAIL,IAAM,EAAO,SAAS,cAAc,CAAC,QAAQ,KAAK,CAAC,IAAI,GACjD,EAAQ,SAAS,cAAc,CAAC,SAAS,KAAK,CAAC,IAAI,GACnD,EAAQ,EAAW,KAAK,CAAC,IAAI,GAE/B,GAAQ,GAAS,GASnB,QAAQ,IAAI,CAAC,kBAAmB,mBART,CACrB,QAAS,gBAAqB,MAAA,CAAL,EAAK,KAC9B,KAAA,EACA,MAAA,EACA,MAAA,CACF,GAGoE,IAAI,CACtE,WACE,EAAa,WAAW,CAAG,QAC3B,EAAK,KAAK,EACZ,EACA,WACE,SAAS,cAAc,CAAC,YAAY,WAAW,CAC3C,2CACN,GAGN,EACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var animatedBlocks = document.querySelectorAll(\".scroll-animated\");\n    var phoneInput = document.getElementById(\"phone\");\n    var phoneErrorTooltip = document.getElementById(\"phoneErrorTooltip\");\n    var form = document.getElementById(\"contactForm\");\n    var submitButton = document.getElementById(\"formSubmit\");\n    // eslint-disable-next-line no-undef\n    var observer = new IntersectionObserver(function(entries) {\n        entries.forEach(function(entry) {\n            if (entry.isIntersecting) entry.target.classList.add(\"visible\");\n        });\n    }, {\n        threshold: 0.1\n    });\n    animatedBlocks.forEach(function(block) {\n        return observer.observe(block);\n    });\n    // eslint-disable-next-line no-undef\n    emailjs.init(\"IwFC2en5CgdtAoWUG\");\n    var validatePhone = function() {\n        var phoneValue = phoneInput.value.trim();\n        var phonePattern = /^[0-9]*$/;\n        var isValid = phonePattern.test(phoneValue);\n        phoneErrorTooltip.style.display = isValid ? \"none\" : \"block\";\n        phoneInput.classList.toggle(\"fieldset__field--error\", !isValid);\n        return isValid;\n    };\n    var debounce = function(func, delay) {\n        var timeout;\n        return function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            clearTimeout(timeout);\n            timeout = setTimeout(function() {\n                return func.apply(void 0, _to_consumable_array(args));\n            }, delay);\n        };\n    };\n    phoneInput.addEventListener(\"blur\", validatePhone);\n    phoneInput.addEventListener(\"input\", debounce(validatePhone, 300));\n    form.addEventListener(\"submit\", function(event) {\n        event.preventDefault();\n        if (!validatePhone()) return;\n        var name = document.getElementById(\"name\").value.trim();\n        var email = document.getElementById(\"email\").value.trim();\n        var phone = phoneInput.value.trim();\n        if (name && email && phone) {\n            var templateParams = {\n                subject: \"Message from \".concat(name, \".\"),\n                name: name,\n                phone: phone,\n                email: email\n            };\n            // eslint-disable-next-line no-undef\n            emailjs.send(\"service_gncxp3g\", \"template_getwrav\", templateParams).then(function() {\n                submitButton.textContent = \"DONE!\";\n                form.reset();\n            }, function() {\n                document.getElementById(\"response\").textContent = \"Failed to send message. Please try again.\";\n            });\n        }\n    });\n});\n\n//# sourceMappingURL=index.7094ed33.js.map\n","'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const animatedBlocks = document.querySelectorAll('.scroll-animated');\n  const phoneInput = document.getElementById('phone');\n  const phoneErrorTooltip = document.getElementById('phoneErrorTooltip');\n  const form = document.getElementById('contactForm');\n  const submitButton = document.getElementById('formSubmit');\n\n  // eslint-disable-next-line no-undef\n  const observer = new IntersectionObserver(\n    (entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          entry.target.classList.add('visible');\n        }\n      });\n    },\n    { threshold: 0.1 },\n  );\n\n  animatedBlocks.forEach((block) => observer.observe(block));\n\n  // eslint-disable-next-line no-undef\n  emailjs.init('IwFC2en5CgdtAoWUG');\n\n  const validatePhone = () => {\n    const phoneValue = phoneInput.value.trim();\n    const phonePattern = /^[0-9]*$/;\n\n    const isValid = phonePattern.test(phoneValue);\n\n    phoneErrorTooltip.style.display = isValid ? 'none' : 'block';\n    phoneInput.classList.toggle('fieldset__field--error', !isValid);\n\n    return isValid;\n  };\n\n  const debounce = (func, delay) => {\n    let timeout;\n\n    return (...args) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func(...args), delay);\n    };\n  };\n\n  phoneInput.addEventListener('blur', validatePhone);\n  phoneInput.addEventListener('input', debounce(validatePhone, 300));\n\n  form.addEventListener('submit', (event) => {\n    event.preventDefault();\n\n    if (!validatePhone()) {\n      return;\n    };\n\n    const name = document.getElementById('name').value.trim();\n    const email = document.getElementById('email').value.trim();\n    const phone = phoneInput.value.trim();\n\n    if (name && email && phone) {\n      const templateParams = {\n        subject: `Message from ${name}.`,\n        name,\n        phone,\n        email,\n      };\n\n      // eslint-disable-next-line no-undef\n      emailjs.send('service_gncxp3g', 'template_getwrav', templateParams).then(\n        () => {\n          submitButton.textContent = 'DONE!';\n          form.reset();\n        },\n        () => {\n          document.getElementById('response').textContent\n            = 'Failed to send message. Please try again.';\n        },\n      );\n    }\n  });\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","document","addEventListener","timeout","animatedBlocks","querySelectorAll","phoneInput","getElementById","phoneErrorTooltip","form","submitButton","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","add","threshold","block","observe","emailjs","init","validatePhone","phoneValue","value","trim","isValid","phonePattern","test","style","display","toggle","_len","arguments","args","_key","clearTimeout","setTimeout","func","apply","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","_non_iterable_spread","TypeError","event","preventDefault","email","phone","send","subject","concat","then","textContent","reset"],"version":3,"file":"index.7094ed33.js.map"}